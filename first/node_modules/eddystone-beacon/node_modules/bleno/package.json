{
  "name": "bleno",
  "version": "0.2.1",
  "description": "A Node.js module for implementing BLE (Bluetooth Low Energy) peripherals",
  "main": "index.js",
  "engines": {
    "node": ">=0.8"
  },
  "os": [
    "darwin",
    "linux",
    "win32"
  ],
  "scripts": {
    "pretest": "jshint *.js lib/. test/. examples/.",
    "test": "mocha -R spec test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sandeepmistry/bleno"
  },
  "keywords": [
    "BLE",
    "Bluetooth",
    "Bluetooth Low Energy",
    "Bluetooth Smart",
    "peripheral"
  ],
  "author": {
    "name": "Sandeep Mistry"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "devDependencies": {
    "jshint": "~2.3.0",
    "should": "~2.0.2",
    "mocha": "~1.14.0",
    "node-blink1": "~0.1.1"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "bluetooth-hci-socket": "~0.3.1",
    "bplist-parser": "0.0.6",
    "xpc-connection": "~0.1.3"
  },
  "optionalDependencies": {
    "bluetooth-hci-socket": "~0.3.1",
    "bplist-parser": "0.0.6",
    "xpc-connection": "~0.1.3"
  },
  "readme": "# bleno\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sandeepmistry/bleno?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\nA Node.js module for implementing BLE (Bluetooth Low Energy) peripherals.\n\nNeed a BLE central module? See [noble](https://github.com/sandeepmistry/noble).\n\n__Note:__ Mac OS X, Linux, and Windows are currently the only supported OSes.\n\n## Prerequisites\n\n### OS X\n\n * install [Xcode](https://itunes.apple.com/ca/app/xcode/id497799835?mt=12)\n * 10.9 or later\n\n### Linux (Ubuntu)\n\n * Kernel version 3.6 or above\n * ```libbluetooth-dev```\n * ```bluetoothd``` disabled, if BlueZ 5.14 or later is installed\n\n#### Ubuntu/Debian/Raspbian\n\n```sh\nsudo apt-get install bluetooth bluez-utils libbluetooth-dev\n```\n\n#### Fedora / Other-RPM based\n\n```sh\nsudo yum install bluez bluez-libs bluez-libs-devel\n```\n\n#### Intel Edison\n\nSee [Configure Intel Edison for Bluetooth LE (Smart) Development](http://rexstjohn.com/configure-intel-edison-for-bluetooth-le-smart-development/)\n\n### Windows\n\n * [node-gyp requirements for Windows](https://github.com/TooTallNate/node-gyp#installation)\n   * Python 2.7\n   * Visual Studio ([Express](https://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx))\n * [node-bluetooth-hci-socket prerequisites](https://github.com/sandeepmistry/node-bluetooth-hci-socket#windows)\n   * Compatible Bluetooth 4.0 USB adapter\n   * [WinUSB](https://msdn.microsoft.com/en-ca/library/windows/hardware/ff540196(v=vs.85).aspx) driver setup for Bluetooth 4.0 USB adapter, using [Zadig tool](http://zadig.akeo.ie/)\n\n## Install\n\n```sh\nnpm install bleno\n```\n\n## Usage\n\n```javascript\nvar bleno = require('bleno');\n```\n\nSee [examples folder](https://github.com/sandeepmistry/bleno/blob/master/examples) for code examples.\n\n### Actions\n\n#### Start advertising\n\n```javascript\nvar name = 'name';\nvar serviceUuids = ['fffffffffffffffffffffffffffffff0']\n\nbleno.startAdvertising(name, serviceUuids[, callback(error)]);\n```\n\n __Note:__: there are limits on the name and service UUID's\n\n  * name\n    * maximum 26 bytes\n  * service UUID's\n    * 1 128-bit service UUID\n    * 1 128-bit service UUID + 2 16-bit service UUID's\n    * 7 16-bit service UUID\n\n\n#### Start advertising iBeacon\n\n```javascript\nvar uuid = 'e2c56db5dffb48d2b060d0f5a71096e0';\nvar major = 0; // 0x0000 - 0xffff\nvar minor = 0; // 0x0000 - 0xffff\nvar measuredPower = -59; // -128 - 127\n\nbleno.startAdvertisingIBeacon(uuid, major, minor, measuredPower[, callback(error)]);\n```\n\n __Notes:__:\n  * OS X:\n    * in iBeacon mode your peripheral is non-connectable!\n\n#### Start advertising with EIR data (__Linux only__)\n\n```javascript\nvar scanData = new Buffer(...); // maximum 31 bytes\nvar advertisementData = new Buffer(...); // maximum 31 bytes\n\nbleno.startAdvertisingWithEIRData(advertisementData[, scanData, callback(error)]);\n```\n\n  * For EIR format section [Bluetooth Core Specification](https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=229737) sections and 8 and 18 for more information the data format.\n\n#### Stop advertising\n\n```javascript\nbleno.stopAdvertising([callback]);\n```\n\n#### Set services\n\n```javascript\nvar services = [\n   ... // see PrimaryService for data type\n];\n\nbleno.setServices(services[, callback(error)]);\n```\n\n#### Disconnect client\n\n```javascript\nbleno.disconnect(); // Linux only\n```\n\n#### Update RSSI\n\n```javascript\nbleno.updateRssi([callback(error, rssi)]); // not available in OS X 10.9\n```\n\n### Primary Service\n\n```javascript\nvar PrimaryService = bleno.PrimaryService;\n\nvar primaryService = new PrimaryService({\n    uuid: 'fffffffffffffffffffffffffffffff0', // or 'fff0' for 16-bit\n    characteristics: [\n        // see Characteristic for data type\n    ]\n});\n```\n\n### Characteristic\n\n```javascript\nvar Characteristic = bleno.Characteristic;\n\nvar characteristic = new Characteristic({\n    uuid: 'fffffffffffffffffffffffffffffff1', // or 'fff1' for 16-bit\n    properties: [ ... ], // can be a combination of 'read', 'write', 'writeWithoutResponse', 'notify', 'indicate'\n    secure: [ ... ], // enable security for properties, can be a combination of 'read', 'write', 'writeWithoutResponse', 'notify', 'indicate'\n    value: null, // optional static value, must be of type Buffer\n    descriptors: [\n        // see Descriptor for data type\n    ],\n    onReadRequest: null, // optional read request handler, function(offset, callback) { ... }\n    onWriteRequest: null, // optional write request handler, function(data, offset, withoutResponse, callback) { ...}\n    onSubscribe: null, // optional notify/indicate subscribe handler, function(maxValueSize, updateValueCallback) { ...}\n    onUnsubscribe: null, // optional notify/indicate unsubscribe handler, function() { ...}\n    onNotify: null // optional notify sent handler, function() { ...}\n    onIndicate: null // optional indicate confirmation received handler, function() { ...}\n});\n```\n\n#### Result codes\n\n  * Characteristic.RESULT_SUCCESS\n  * Characteristic.RESULT_INVALID_OFFSET\n  * Characteristic.RESULT_INVALID_ATTRIBUTE_LENGTH\n  * Characteristic.RESULT_UNLIKELY_ERROR\n\n#### Read requests\n\nCan specify read request handler via constructor options or by extending Characteristic and overriding onReadRequest.\n\nParameters to handler are\n  * ```offset``` (0x0000 - 0xffff)\n  * ```callback```\n\n\n```callback``` must be called with result and data (of type ```Buffer```) - can be async.\n\n```javascript\nvar result = Characteristic.RESULT_SUCCESS;\nvar data = new Buffer( ... );\n\ncallback(result, data);\n```\n\n#### Write requests\n\nCan specify write request handler via constructor options or by extending Characteristic and overriding onWriteRequest.\n\nParameters to handler are\n  * ```data``` (Buffer)\n  * ```offset``` (0x0000 - 0xffff)\n  * ```withoutResponse``` (true | false)\n  * ```callback```.\n\n```callback``` must be called with result code - can be async.\n\n```javascript\nvar result = Characteristic.RESULT_SUCCESS;\n\ncallback(result);\n```\n\n#### Notify subscribe\n\nCan specify notify subscribe handler via constructor options or by extending Characteristic and overriding onSubscribe.\n\nParameters to handler are\n  * ```maxValueSize``` (maximum data size)\n  * ```updateValueCallback``` (callback to call when value has changed)\n\n#### Notify unsubscribe\n\nCan specify notify unsubscribe handler via constructor options or by extending Characteristic and overriding onUnsubscribe.\n\n#### Notify value changes\n\nCall the ```updateValueCallback``` callback (see Notify subcribe), with an argument of type ```Buffer```\n\nCan specify notify sent handler via constructor options or by extending Characteristic and overriding onNotify.\n\n### Descriptor\n\n```javascript\nvar Descriptor = bleno.Descriptor;\n\nvar descriptor = new Descriptor({\n    uuid: '2901',\n    value: 'value' // static value, must be of type Buffer or string if set\n});\n```\n\n### Events\n\n#### Adapter state change\n\n```javascript\nstate = <\"unknown\" | \"resetting\" | \"unsupported\" | \"unauthorized\" | \"poweredOff\" | \"poweredOn\">\n\nbleno.on('stateChange', callback(state));\n```\n\n#### Advertisement started\n\n```javascript\nbleno.on('advertisingStart', callback(error));\n\nbleno.on('advertisingStartError', callback(error));\n```\n\n#### Advertisement stopped\n\n```javascript\nbleno.on('advertisingStop', callback);\n```\n\n#### Services set\n\n```javascript\nbleno.on('servicesSet', callback(error));\n\nbleno.on('servicesSetError', callback(error));\n```\n\n#### Accept\n\n```javascript\nbleno.on('accept', callback(clientAddress)); // not available on OS X 10.9\n```\n\n#### Disconnect\n\n```javascript\nbleno.on('disconnect', callback(clientAddress)); // Linux only\n```\n\n#### RSSI Update\n\n```javascript\nbleno.on('rssiUpdate', callback(rssi)); // not available on OS X 10.9\n```\n\n### Running on Linux\n\n#### Running without root/sudo\n\nRun the following command:\n\n```sh\nsudo setcap cap_net_raw+eip $(eval readlink -f `which node`)\n```\n\nThis grants the ```node``` binary ```cap_net_raw``` privileges, so it can start/stop BLE advertising.\n\n__Note:__ The above command requires ```setcap``` to be installed, it can be installed using the following:\n\n * apt: ```sudo apt-get install libcap2-bin```\n * yum: ```su -c \\'yum install libcap2-bin\\'```\n\n#### Multiple Adapters\n\n```hci0``` is used by default to override set the ```BLENO_HCI_DEVICE_ID``` environment variable to the interface number.\n\nExample, specify ```hci1```:\n\n```sh\nsudo BLENO_HCI_DEVICE_ID=1 node <your file>.js\n```\n\n#### Set custom device name\n\nBy default bleno uses the hostname (```require('os').hostname()```) as the value for the device name (0x2a00) characterisic, to match the behaviour of OS X.\n\nA custom device name can be specified by setting the ```BLENO_DEVICE_NAME``` enviroment variable:\n\n```sh\nsudo BLENO_DEVICE_NAME=\"custom device name\" node <your file>.js\n```\n\n#### Set Advertising Interval\n\nbleno uses a 100 ms advertising interval by default.\n\nA custom advertising interval can be specified by setting the ```BLENO_ADVERTISING_INTERVAL``` enviroment variable with the desired value in milliseconds:\n\n```sh\nsudo BLENO_ADVERTISING_INTERVAL=500 node <your file>.js\n```\n\nAdvertising intervals must be between 20 ms to 10 s (10,000 ms).\n\n## Useful tools/links\n\n * Tools\n   * LightBlue for [iOS](https://itunes.apple.com/us/app/lightblue/id557428110)/[OS X](https://itunes.apple.com/us/app/lightblue/id639944780)\n   * [nRF Master Control Panel (BLE)](https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp&hl=en) for Android\n   * [hcitool](http://linux.die.net/man/1/hcitool) and ```gatttool``` by [BlueZ](http://www.bluez.org) for Linux\n\n\n## License\n\nCopyright (C) 2015 Sandeep Mistry <sandeep.mistry@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[![Analytics](https://ga-beacon.appspot.com/UA-56089547-1/sandeepmistry/bleno?pixel)](https://github.com/igrigorik/ga-beacon)\n",
  "bugs": {
    "url": "https://github.com/sandeepmistry/bleno/issues"
  },
  "homepage": "https://github.com/sandeepmistry/bleno",
  "_id": "bleno@0.2.1",
  "_shasum": "027af2fb0d308876809eefd355c6e5f34d6d9fc9",
  "_from": "bleno@~0.2.1",
  "_resolved": "https://registry.npmjs.org/bleno/-/bleno-0.2.1.tgz"
}
